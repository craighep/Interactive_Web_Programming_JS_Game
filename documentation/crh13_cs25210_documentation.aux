\relax 
\@writefile{toc}{\contentsline {section}{\numberline {1}INTRODUCTION}{3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.1}Purpose of this Document}{3}}
\@writefile{toc}{\contentsline {section}{\numberline {2}Executive Summary}{3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}Wire-Frames}{3}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Drawn using Powerpoint, this is the first of a set of wire frames I used when implementing my game. Each of the menu screens displayed starting with the main menu and level selection would have the same backgrounds (a cave image), and each button being blue with a gradient. In the level selection, levels would be in a three by three grid, all with the number or a padlock image depending if complete or not. Also having completed a level depending if it was completed in minimum moves or not would either show a tick if done perfectly a star shape. The next two wire frames show in play, and also the pause menu when a user either presses the pause button below the canvas or the 'p' on the users keyboard.\relax }}{3}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces On the next four wire frames, I have shown the user completing an achievement resulting in a similar semi transparent box that would appear, with the achievement information followed by a continue game button. On the instructions page, I have chosen to keep this simple to have the text in a semi transparent box above the same background as other menus. The text in white, in bold makes it easier to read. The menu button in the corner would navigate back to the main menu. As for the achievement frame, this would work similar to the level selection page.\relax }}{4}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces For the final wire frame of this section, the settings page example shows the options available, being the option to delete achievements and levels and also the option to mute and un-mute the game. Keeping these as simple as possible makes the game easier and quicker to use.\relax }}{4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2}Use Cases}{5}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces Use case displaying options to user when game is displayed in browser\relax }}{5}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces Within the settings of the menu, the user can choose these options, and when resetting user data can choose to confirm or not. This avoids accidental loss of data.\relax }}{5}}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces When in the level selection menu, the user can choose to play a level or go back to the menu.\relax }}{6}}
\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces There is two methods of moving a player, and also the option to pause the level in-game.\relax }}{6}}
\@writefile{lof}{\contentsline {figure}{\numberline {8}{\ignorespaces This simply shows options within the pause menu. The user can resume, choose another level, or go back to the main menu.\relax }}{6}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3}Story Boards}{7}}
\@writefile{lof}{\contentsline {figure}{\numberline {9}{\ignorespaces The story board displayed below shows the first four stages of playing a level within the game. As you can see, the user would firstly select the 'play game' then choose an available level on the selection menu. Once this is done, the user then moves the player around the maze. In state 4, the user has hit a wall resulting in the stopping of movement of the player. The next move is awaited.\relax }}{7}}
\@writefile{lof}{\contentsline {figure}{\numberline {10}{\ignorespaces In the next three stages of the storyboard intended to show the way a user would navigate through playing the game, I have firstly shown the paused menu, followed by a user completing a level triggering an achievement. After clicking continue, the user would then move to the next level. In the final storyboard, the game is complete and the user would press the menu button to return top the menu.\relax }}{8}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.4}Javascript Class Diagram}{9}}
\@writefile{lof}{\contentsline {figure}{\numberline {11}{\ignorespaces Tee first class, which is simple set up code within the game page creates all the variables used in the functions within the game. These are all public to make them easily accessible. Key variables here hold the level number currently playing, the boolean to check if the user has paused the game or not, and if the sound is muted. The other classes linked from this create the menus and game itself. Within the game, the draw method draws the map after every few milliseconds as the position of the player moves, and the clear function refreshes the canvas before every draw. Other methods here check the achievements, pauses, deaths etc.\relax }}{9}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.5}Javascript State Diagrams}{10}}
\@writefile{lof}{\contentsline {figure}{\numberline {12}{\ignorespaces THis simply shows the transitions between different states the user can get the system into. In the menu for instance, the user can go to a range of menus and get easily back to the main menu at any time. \relax }}{10}}
\@writefile{lof}{\contentsline {figure}{\numberline {13}{\ignorespaces The last diagram here shows the run through of playing a level. When inside a level after making a move, the user can either make another move, unlock an achievement, complete the game or complete a level. In the instance of completing a level,the user would be taken back to the main menu.\relax }}{10}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Technical Overview}{11}}
\@writefile{toc}{\contentsline {section}{\numberline {4}Software Testing}{11}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1}Browser Compatibility}{11}}
\@writefile{lof}{\contentsline {figure}{\numberline {14}{\ignorespaces (\emph  {Firefox})- This browser displayed the game and site features very well, including the gradients on the buttons. When playing the game in this browser, I did find Firefox was slightly slower than the other browsers at handling Javascript, but the game was perfectly playable.\relax }}{11}}
\@writefile{lof}{\contentsline {figure}{\numberline {15}{\ignorespaces (\emph  {Chrome})- The Google Chrome browser handled the game very well, at a much higher speed than that of Firefox and SeaMonkey and again also allowed for the gradient style on each of the buttons. I found Chrome loaded in-play images faster too, so when advancing to a new level it loaded faster than most others.\relax }}{12}}
\@writefile{lof}{\contentsline {figure}{\numberline {16}{\ignorespaces (\emph  {Internet Explorer})- The only browser not to display the game, Internet explorer failed to run the canvas which in turn produced the text telling the user it could not run on that platform. In addition to this, IE also did not allow for the gradient on buttons, instead being plain rollover buttons.\relax }}{12}}
\@writefile{lof}{\contentsline {figure}{\numberline {17}{\ignorespaces (\emph  {Opera})- The second fastest in terms of playability speed concerning the Javascript abilities, Opera loaded images very fast compared to other browsers. Again, button gradients did not appear on opera and showed up as just plain rollover buttons. Although all browsers loaded the music roughly the same speed (except IE), opera seemed slightly quicker.\relax }}{13}}
\@writefile{lof}{\contentsline {figure}{\numberline {18}{\ignorespaces (\emph  {Maxthon})- From testing each browser on different computers, I have found that this browser was the fastest in terms of running the Javascript, resulting in smoother and faster game play. Maxthon also allowed for gradients upon any buttons in the menus or on the site.6\relax }}{13}}
\@writefile{lof}{\contentsline {figure}{\numberline {19}{\ignorespaces (\emph  {SeaMonkey})- The slowest of the browsers that played the game, SeaMonkey did allow for gradients, but ran slightly slower at times, for instance the player square object would not run across the screen in a completely smooth manner. \relax }}{14}}
\citation{mobile}
\@writefile{lof}{\contentsline {figure}{\numberline {20}{\ignorespaces As you will also see if that on my own phone type, the game ran fine and allowed me to play the game properly using the directional buttons placed on the page. I wanted to get a wider scope of tests here, so I also did some tests on a number of other phones to see how the site performed.\relax }}{15}}
\@writefile{lof}{\contentsline {figure}{\numberline {21}{\ignorespaces The iPad, running the same software as that of the iPhone, shows that the game again ran just as well. this time because of the size of the screen allowed the game to be made bigger. In both cases, the sound played fine including the use of the mute and un-mute functions.\relax }}{15}}
\@writefile{lof}{\contentsline {figure}{\numberline {22}{\ignorespaces I wanted to try the game on a different phone and browser all together here, this time being a Samsung. I used an older phone here to see the capabilities of the browser and if it could support the canvas element. As you can see, the game again runs fine, although the only issue here was the screen was slightly too small to fit the whole canvas in and makes the game very hard to play. The sound did not load on this phone unlike the previous two.\relax }}{16}}
\@writefile{lof}{\contentsline {figure}{\numberline {23}{\ignorespaces This table shows general results of some of the tests from my desktop browser tests, but under different operating systems. For instance, although I showed all the major browsers, this was only under Windows. To get a better scope, I have tested some browsers in both Windows, Ubuntu and also Mac Os. Testing in different operating systems is important because for instance, the libraries concerning types of fonts are not available in Ubuntu as widely as they are in Windows.\relax }}{16}}
\citation{jslint}
\citation{jsunit}
\citation{webpagetest}
\citation{webpagetest}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2}Website Testing}{17}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.3}Alternative Testing}{17}}
\@writefile{lof}{\contentsline {figure}{\numberline {24}{\ignorespaces Diagram gained from webpage test site \cite  {webpagetest} showing waterfall loading times for the page. As you can see, the page loads including all Javascript and images in around 4 seconds. This is average for a page before a user leaves so I have showed here my page loads with good speed.\relax }}{17}}
\@writefile{toc}{\contentsline {section}{\numberline {5}Reflections and Future Work}{17}}
\citation{count}
\bibcite{webpagetest}{1}
\bibcite{jslint}{2}
\bibcite{jsunit}{3}
\bibcite{mobile}{4}
\bibcite{count}{5}
\@writefile{toc}{\contentsline {section}{\numberline {6}REFERENCES}{18}}
\@writefile{toc}{\contentsline {section}{\numberline {7}DOCUMENT HISTORY}{18}}
